# Dockerfile for Strapi Backend - Optimized for EC2 Free Tier
# Uses multi-stage build for production optimization and memory efficiency

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
RUN npm ci --only=production --no-audit --no-fund

# Stage 2: Build
FROM node:18-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy all files
COPY . .

# Install all dependencies (including dev dependencies for build)
RUN npm ci --no-audit --no-fund

# Build admin panel (also compiles TS)
ENV NODE_ENV=production
RUN npm run build

# Clean up dev dependencies to save space
RUN npm prune --production

# Stage 3: Runner - Optimized for EC2 t2.micro (1GB RAM)
FROM node:18-alpine AS runner
RUN apk add --no-cache libc6-compat curl

WORKDIR /app

# Add non-root user for security
RUN addgroup -g 1001 -S strapi && \
    adduser -S strapi -u 1001

# Copy production dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/favicon.png ./favicon.png

# Copy Strapi configuration if exists
COPY --from=builder /app/.strapi ./.strapi 2>/dev/null || true

# Create necessary directories and set permissions
RUN mkdir -p /app/public/uploads && \
    mkdir -p /app/.tmp && \
    chown -R strapi:strapi /app

# Set user
USER strapi

# Expose port
EXPOSE 1337

# Set runtime environment variables for EC2
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=1337
ENV NODE_OPTIONS="--max-old-space-size=512"

# Health check optimized for low resources
HEALTHCHECK --interval=60s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:1337/api/health || exit 1

# Start Strapi with memory optimization
CMD ["node", "--max-old-space-size=512", "node_modules/@strapi/strapi/bin/strapi.js", "start"]

# Docker Compose for EC2 deployment
# Optimized for t2.micro instance (1GB RAM)
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: stoic-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-stoic_attitude}
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - stoic_network
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 200M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-strapi_user} -d ${DATABASE_NAME:-stoic_attitude}"]
      interval: 30s
      timeout: 10s
      retries: 3

  strapi:
    build:
      context: .
      dockerfile: Dockerfile.ec2
    container_name: stoic-strapi
    restart: unless-stopped
    environment:
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 1337
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-stoic_attitude}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SSL: false
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      STRAPI_URL: ${STRAPI_URL:-http://localhost:1337}
      NODE_OPTIONS: "--max-old-space-size=400"
    volumes:
      - uploads_data:/app/public/uploads
      - ./config:/app/config:ro
    ports:
      - "1337:1337"
    networks:
      - stoic_network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 300M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/api/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stoic-webapp/postgres-data
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stoic-webapp/uploads

networks:
  stoic_network:
    driver: bridge
